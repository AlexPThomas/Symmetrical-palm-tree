{"version":3,"file":"APIService.js","sourceRoot":"","sources":["APIService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by Alex on 16/04/2017.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\n\r\nimport {SpotifyUser, SpotifyImage, SpotifyPlaylist} from './SpotifyObjects';\r\n\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n@Injectable()\r\nexport class APIService {\r\n    apiUrl: string = '';\r\n    accessToken: String = '';\r\n    constructor(private http: Http){}\r\n\r\n    public initialise(): Promise<SpotifyUser> {\r\n        return this.http.get(this.apiUrl + '/token')\r\n            .toPromise()\r\n            .then(this.extractData)\r\n            .then((body :any) => {\r\n                console.log(body);\r\n                this.accessToken = body.accessToken;\r\n                console.log('successful token ' + this.accessToken);\r\n                let headers = new Headers({ 'Authorization': ' Bearer ' + this.accessToken });\r\n                let options = new RequestOptions({ headers: headers });\r\n                return this.http.get('https://api.spotify.com/v1/me',options)\r\n                    .toPromise()\r\n                    .then(this.extractData)\r\n                    .catch(this.handleError);\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public getUserPlaylists(id: string): Promise<{items: SpotifyPlaylist[]}> {\r\n        let headers = new Headers({ 'Authorization': ' Bearer ' + this.accessToken });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this.http.get('https://api.spotify.com/v1/users/' + id + '/playlists', options)\r\n            .toPromise()\r\n            .then(this.extractData)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n\r\n    private extractData(res: Response){\r\n        let body = res.json();\r\n        return body || { };\r\n    }\r\n\r\n    private handleError (error: Response | any) {\r\n        // In a real world app, you might use a remote logging infrastructure\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || '';\r\n            const err = body.error || JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error('there was an error',errMsg);\r\n        return Promise.reject(errMsg);\r\n    }\r\n}\r\n"]}